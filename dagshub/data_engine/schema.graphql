scalar DateTime

type DataPoint {
	id: ID!
	name: String!
	source: DataPointSource!
	metadata: [MetadataField!]
	createdAt: DateTime!
	updatedAt: DateTime!
}

interface DataPointSource {
	name: String!
	downloadUrl: String!
	previewUrl: String!
	metadata: [MetadataField!]
}

type GitSource implements DataPointSource {
	name: String!
	revision: String!
	srcUrl: String!
	downloadUrl: String!
	previewUrl: String!
}

type DvcSource implements DataPointSource {
	name: String!
	revision: String!
	srcUrl: String!
	downloadUrl: String!
	previewUrl: String!
}

type BucketSource implements DataPointSource {
	name: String!
	downloadUrl: String!
	previewUrl: String!
	fullUrl: String! # i.e: s3://bucket-name/path/to/file
	bucket: Bucket!
}

type Bucket {
	name: String!
	type: String!
	root: String
	endpointUrl: String
}

type MetadataField {
	key: String!
	value: MetadataValue!
}

scalar MetadataValue

enum DatasetLifeCycleStage {
	DRAFT
	LOCKED
	RETIRED
}

type Dataset {
	id: ID!
	name: String!
	createdAt: String!
	updatedAt: String!
	lifeCycle: DatasetLifeCycleStage!
	metadata: [MetadataField!]
	datapoints(first: Int, after: String): DataPointsConnection!
}

type DataPointsConnection {
	datapoints: [DataPoint!]
	pageInfo: PageInfo!
}

type DataSetsConnection {
	datasets: [Dataset!]
	pageInfo: PageInfo!
}

type PageInfo {
	hasNextPage: Boolean!
	endCursor: String
}

type Query {
	dataPoints(dataset: ID!, filter: [MetadataFilter!], first: Int, after: String): DataPointsConnection!
	dataSets(repo: ID, first: Int , after: String): DataSetsConnection!
}

input MetadataFilter {
	key: String!
	value: MetadataInputValue!
}

union MetadataInputValue = Int | Float | String | Boolean | [MetadataInput!]! | MetadataInput

type Mutation {
createDataset(name: String!, from: DatasetInput!): Dataset,
updateDataset(id: ID!, name: String, lifeCycle: LifeCycleStage, addMetadataaddDataPoints: [ID!], removeDataPoints: [ID!]): Dataset,
addDataPointMetadata(id: ID!, metadata: [MetadataInput!]): DataPoint,
}

input RepoPathInput {
repo: ID!
revision: String!
dirPath: String!
}

input CopyDatasetInput {
dataset: ID!
}

input BucketInput {
name: String!
root: String
dirPath: String
}

input ParentDatasetInput {
parentDataset: ID!
dataPoints: [ID!]
}

union DatasetInput = RepoPathInput | CopyDatasetInput | BucketInput | ParentDatasetInput

